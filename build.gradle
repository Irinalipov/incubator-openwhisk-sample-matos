/**
 * Copyright 2015 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/
//
// Licensed Materials - Property of IBM
// Â© Copyright IBM Corp. 2015
//
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

mainClassName = 'com.messagehub.samples.MessageHubFetcher'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()

    // Read from lib/ directory
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    compile 'org.apache.kafka:kafka-clients:0.9.0.0'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0-rc1'
    compile fileTree(dir: 'lib-message-hub', include: ['*.jar'])
}

// Compile source code
compileJava {
    source = 'src'
    options.encoding = 'ISO-8859-1'
}

// Save JAR in build directory.
uploadArchives {
    repositories {
        flatDir {
            dirs 'build'
        }
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    // Provide Main-Class so the JAR executes properly, along with the required classpath data.
    manifest {
        attributes('Main-Class': mainClassName)
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    copy {
        from 'resources/log4j.properties'
        into '.'
    }
    from ('.') {
        include 'log4j.properties'
        include 'resources/*'
    }
    with jar
//    doLast {
//        println "configurations:"
//        configurations.collect {println it}
//        println "runtime:"
//        configurations.runtime.collect {println it}
//    }
}

